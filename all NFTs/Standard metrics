with tx_hashes as
(
  select 
  distinct m.tx_hash
  from monad.testnet.fact_event_logs m
  join monad.testnet.fact_transactions t
    on m.tx_hash = t.tx_hash
  -- join private_mint pm 
  --   on m.origin_from_address = pm.mint_address
  where (m.contract_address = '0xe8f0635591190fb626f9d13c49b60626561ed145' 
    or (m.contract_address = '0x760afe86e5de5fa0ee542fc7b7b713e1c5425701' and m.origin_to_address = '0x224ecb4eae96d31372d1090c3b0233c8310dbbab'))
  and m.block_timestamp >= '2025-02-19 16:00:00'
  and t.tx_succeeded = TRUE
),

transfers as
(
  select 
    m.block_timestamp,
    m.tx_hash,
    m.contract_address AS nft_contract,
    m.origin_from_address,
    m.origin_to_address,
    m.topic_0,
    m.topic_1,
    m.topic_2,
    CASE
      when topic_3 = NULL
      then 0
      else TO_NUMERIC(utils.udf_hex_to_int(topic_3)) -- convert tokenid to numeric
    END as token_id,
    CASE
      when m.contract_address = '0x760afe86e5de5fa0ee542fc7b7b713e1c5425701'
      then TO_NUMERIC(utils.udf_hex_to_int(REPLACE(m.data, '0x0000000000000000000000000000000000000000000000', ''))) / POWER(10,18) -- make the hex WMON value numeric
      else 0
    END as data_converted,
    t.value as MON_value,
    t.tx_fee as gas_fee
  from monad.testnet.fact_event_logs m
  join monad.testnet.fact_transactions t
    on m.tx_hash = t.tx_hash
  join tx_hashes h
    on m.tx_hash = h.tx_hash
  where m.tx_hash in (
    select tx_hash
    from monad.testnet.fact_event_logs
    where contract_address = lower('0xe8f0635591190fb626f9d13c49b60626561ed145')) -- ensure tx_hashes involving skrumpets are only included
  and (m.contract_address = '0xe8f0635591190fb626f9d13c49b60626561ed145' or m.contract_address = '0x760afe86e5de5fa0ee542fc7b7b713e1c5425701') -- exlcude other parts of txs with irrelvant contracts
  and (m.topic_0 != '0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31') -- exclude setapprovals
  order by m.block_timestamp
),

minted as
(
  select 
    block_timestamp,
    tx_hash,
    nft_contract,
    topic_1 as seller,
    origin_from_address as buyer,
    token_id,
    mon_value as final_price,
    gas_fee,
    'minted' as transfer_type
  from transfers
  where topic_1 = lower('0x0000000000000000000000000000000000000000000000000000000000000000')
),

listed_fulfill as
(
  select 
    block_timestamp,
    tx_hash,
    nft_contract,
    REPLACE(topic_1, '000000000000000000000000', '') as seller,
    origin_from_address as buyer,
    token_id,
    mon_value / count(*) over (partition by tx_hash) as final_price,
    gas_fee,
    'listed_fulfill' as transfer_type
  from transfers
  where mon_value > 0 and topic_1 != lower('0x0000000000000000000000000000000000000000000000000000000000000000')
),

instant_sell as
(
  select 
    block_timestamp,
    tx_hash,
    nft_contract,
    origin_from_address as seller,
    REPLACE(topic_2, '000000000000000000000000', '') as buyer,
    token_id,
    MAX(data_converted) OVER (PARTITION BY tx_hash) AS final_price,
    gas_fee,
    'instant_sell' as transfer_type
  from transfers
  where topic_1 != lower('0x0000000000000000000000000000000000000000000000000000000000000000') 
  and mon_value = 0
  and tx_hash in (
    select tx_hash
    from transfers
    where nft_contract = lower('0x760afe86e5de5fa0ee542fc7b7b713e1c5425701'))
),

instant_sell_final as
(
  select *
  from instant_sell
  where token_id is not NULL
  and buyer != '0xfdf5cfbcf6503293046ad686bb7fee8e9885b93d' -- exclude irrelvant rows
),

transfers_regular as
(
  select 
    block_timestamp,
    tx_hash,
    nft_contract,
    origin_from_address as seller,
    REPLACE(topic_2, '000000000000000000000000', '') as buyer,
    token_id,
    mon_value as final_price,
    gas_fee,
    'transfers_regular' as transfer_type
  from transfers
  where topic_1 != lower('0x0000000000000000000000000000000000000000000000000000000000000000') 
  and tx_hash not in (
    select tx_hash
    from transfers
    where nft_contract = lower('0x760afe86e5de5fa0ee542fc7b7b713e1c5425701'))
  and origin_to_address != '0x0000000000000068f116a894984e2db1123eb395' -- exclude fullfilladvancedorders
),

processed_transfers as
(
  select * from minted
  union all
  select * from listed_fulfill
  union all
  select * from instant_sell_final
  union all
  select * from transfers_regular
),

numbered_transfers as
(
  select 
    block_timestamp,
    tx_hash,
    nft_contract,
    seller,
    buyer,
    token_id,
    TO_NUMERIC(final_price) as final_price,
    gas_fee,
    transfer_type,
    ROW_NUMBER() OVER (PARTITION BY token_id ORDER BY block_timestamp ASC) AS row_num,
    ROW_NUMBER() OVER (PARTITION BY tx_hash ORDER BY token_id) AS num_hash
  from processed_transfers
)

select 
  COUNT(*) AS total_nft_txns,
  SUM(final_price) as total_nft_volume
from processed_transfers
